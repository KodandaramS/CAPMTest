PROCEDURE "get_po_header_data"(
    out ex_emp_total_orders TABLE(
      LOGINNAME nvarchar(12),
      fullname nvarchar(100),
      create_cnt integer,
      change_cnt integer,
      combine_cnt integer,
      rank_val INTEGER,
      name varchar(256)
    )
  ) 
  LANGUAGE SQLSCRIPT 
  SQL SECURITY INVOKER 
  --DEFAULT SCHEMA <default_schema_name>
  READS SQL DATA AS 
BEGIN 
  /*************************************
  Write your procedure logic
  *************************************/
  -- Get count from PO Header table
  ex_po_create_cnt_table =
  SELECT COUNT(*) AS create_cnt,
    "CREATEDBY" AS EID
  FROM EDM_DB_TRANSACTION_PURCHASEORDER
  WHERE ID IN (
      SELECT "PARENT_KEY_ID"
      FROM EDM_DB_TRANSACTION_POITEMS
      WHERE "PRODUCT_GUID_NODE_KEY" IS NOT NULL
    )
  GROUP BY CREATEDBY;
  --now create implicit variables
  --Q2
  ex_po_change_cnt_table =
  SELECT COUNT(*) AS change_cnt,
    "MODIFIEDBY" AS EID
  FROM EDM_DB_TRANSACTION_PURCHASEORDER
  WHERE ID IN (
      SELECT "PARENT_KEY_ID"
      FROM EDM_DB_TRANSACTION_POITEMS
      WHERE "PRODUCT_GUID_NODE_KEY" IS NOT NULL
    )
  GROUP BY "MODIFIEDBY";
  --Q3
  ex_emp_total_orders =
  SELECT emp.loginname,
  "get_full_name"( "NAMEFIRST", "NAMEMIDDLE", "NAMELAST") as FULLNAME,
    crt.create_cnt,
    chg.change_cnt,
    crt.create_cnt + chg.change_cnt AS combine_cnt,
    RANK() OVER(ORDER BY crt.create_cnt + chg.change_cnt DESC) AS rank_val,
    emp.namefirst AS name
  FROM EDM_DB_MASTER_EMPLOYEES AS emp
    LEFT OUTER JOIN :ex_po_create_cnt_table AS crt
   ON emp.id = crt.EID
    LEFT OUTER JOIN :ex_po_change_cnt_table AS chg
   ON emp.id = chg.EID;
END